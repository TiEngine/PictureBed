{"root":{"data":{"id":"crvhlau3qr40","created":1681374710749,"text":"世界的数字表达","expandState":"expand","note":"学科差异：\n\n| Type                     | Input     | Output    |\n| ------------------------ | --------- | --------- |\n| Digital Image Processing | Image     | Image     |\n| Compute Vision           | Image     | Knowledge |\n| Compute Graphics         | Knowledge | Image     |\n| Artificial Intelligence  | Knowledge | Knowledge |\n\n为了完成一个复杂的项目，我们可能会需要多种学科的交叉。"},"children":[{"data":{"id":"crvhnu0b34w0","created":1681374909211,"text":"世界的2D表示","layout":null},"children":[{"data":{"id":"crvi05nmg2o0","created":1681375874936,"text":"表示类型","expandState":"expand","layout":null},"children":[{"data":{"id":"crvhnv5okvk0","created":1681374911713,"text":"栅格图像(Image)","layout":null,"note":"- 定义：离散存储的像素矩阵\n- 来源：相机拍摄（传感器元件）、显示设备、打印设备、等等\n- 关联：物理设备相关\n- 分辨率：有限，放大后会出现马赛克、边缘锯齿"},"children":[]},{"data":{"id":"crvhoa615ps0","created":1681374944386,"text":"矢量图形(Graphics)","layout":null,"note":"- 定义：具有数学表达的几何对象（点、线、面）\n  图形对象可以具有属性：大小、线宽、类型、填充、颜色、等等\n- 来源：矢量图设计、矢量字体设计、等等\n- 关联：设计/逻辑\n- 分辨率：广义上的无限，狭义上的有限\n  如何理解？如果矢量图形是通过精细的数学设计后得出的，那么它可以是无限分辨率的，在不考虑显示设备的显示精度的情况下（目前的显示设备必然需要经过“矢量栅格化”才能显示，显示的最小单元是像素）无限的缩放不会影响显示的效果，不会有马赛克也不会有边缘锯齿，平滑清晰；如果是通过“图像矢量化”从图像通过找拟合的数学表达式等方法转换过来的，那么它能表示的信息又是有限的，分辨率还是原先图像的分辨率，但是缩放不会出现马赛克和边缘锯齿，而是出现平滑的模糊，因为数学表达式通常是连续的。"},"children":[]}]},{"data":{"id":"crvi08cnf2g0","created":1681375880803,"text":"表示转换","layout":null},"children":[{"data":{"id":"crvi1mtly940","created":1681375990667,"text":"图像矢量化","layout":null,"note":"通过图像像素拟合出相应的数学表达\n\n*具有严格数学设计的矢量图体积可以非常小。一般图像矢量化后，体积一般也会变小，因为存储方式不同，矢量图形仅需要存储数学表达式，而栅格图像需要保存像素信息。*\n\n*矢量图形**难以表达高度复杂的纹理图像（即高频的信号）**，这是因为受限于矢量图形通常需要用数学函数来描述，而在一段连续的函数描述的片段中，不会出现突变。因此，在图像矢量化的过程中，高频的信号一般会丢失，图像纹理细节会损失掉。*\n"},"children":[]},{"data":{"id":"crvi1o26s0w0","created":1681375993363,"text":"矢量栅格化","layout":null,"note":"通过将矢量图形中记录的数学表示，计算出对应的坐标，然后转化为像素（该过程也叫“渲染(Rendering)”，是2D的渲染）\n\n*我们的显示设备（包括打印设备等），通常都是离散的，液晶屏幕也有细小的像素点（液晶），因此矢量图形通常都需要栅格化后才能呈现给大家肉眼观看。*\n"},"children":[]}]},{"data":{"id":"crvi5nx1otk0","created":1681376306508,"text":"矢栅之争","layout":null,"image":"","imageTitle":"","imageSize":"","note":"|                    | 栅格图像               | 矢量图形                                       |\n| ------------------ | ---------------------- | ---------------------------------------------- |\n| **表达**     | 像素点阵，无数学表达   | 数学表达：坐标点、直线段、曲线、…             |\n| **存储**     | 像素的集合：存储空间大 | 坐标与方程：存储空间小                         |\n| **绘制**     | 直接显示像素           | 通过转化计算（渲染）得到像素再显示             |\n| **缩放**     | 利用领域信息来插值得到 | 先计算坐标，再转化为像素集                     |\n| **分辨率**   | 有限                   | 无限（广义上的无限，狭义上的有限）             |\n| **语义性**   | 无语义的               | 可含语义的（如线宽、颜色、…，甚至自定义语义） |\n| **常用软件** | Adobe Photoshop        | Adobe Illustrator / Corel Draw                 |\n"},"children":[]}]},{"data":{"id":"crvhx1nfqc00","created":1681375631125,"text":"世界的3D表示","layout":null},"children":[{"data":{"id":"crvhx6ay8qo0","created":1681375641254,"text":"3D世界的表达","layout":null,"note":"解决的本质问题就是：生成从任意视点观看世界的影像"},"children":[{"data":{"id":"crw38abl8ew0","created":1681435755313,"text":"视觉(CV)方法","note":"“视觉的3D世界表达”本质是想要解决**从已知的针对某物体或环境的视点的图像，经过一系列的“知识理解”后，生成未知视点的图像**的问题。\n\n即：新视点渲染(Novel View Synthesis, NVS)。\n\n通过传统的视觉的方法，我们通常会遇到一个问题：**无法自由地生成新视点的图像。**\n\n如何从采集合成到自由生成，这就要求我们去探究**颜色（图像）产生的原理**，即来到了图形学(CG)的理论世界。"},"children":[{"data":{"id":"crw4fxy2zds0","created":1681439176399,"text":"针对单一物体","expandState":"expand","note":"“物体”其实本身也可以算是“环境”的一部分（这里我们单独拿出来，只是想能简单区分一下“静态”和“动态”的，一般我们可以把“环境”认为是“静态”的，而此处的“物体”认为是“动态”的，动态的物理可以改变位置、姿态等信息）"},"children":[{"data":{"id":"crw3tko7xpc0","created":1681437423492,"text":"Billboard图像"},"children":[{"data":{"id":"crw4fvo42qw0","created":1681439171442,"text":"一个Billboard","note":"仅能实现与原视点角度差异不大时的新视点观看物体的显示效果"},"children":[]},{"data":{"id":"crw4hb7ialc0","created":1681439283631,"text":"正交的两个Billboard","note":"可以实现与原视点多角度观看物体的显示效果，但是“只可远观，不可细看”（在包围盒外）*例如考虑针对是树的场景，树叶稀疏，树干占包围盒内容积不大，典型的稀疏场景*"},"children":[]},{"data":{"id":"crw4hbtclm00","created":1681439284952,"text":"多个正交的Billboard","note":"- 同一个位置多个Billboard，可以实现LOD(Level of Detail)\n- 不同位置的多个Billboard，可以在物体的包围盒中划分出剖面，当视点进入包围盒内时，仍然能提供较好的显示效果"},"children":[]}]}]},{"data":{"id":"crw4g6u60e80","created":1681439195753,"text":"针对环境","expandState":"expand"},"children":[{"data":{"id":"crw43obiec00","created":1681438215073,"text":"辐射场(Radiance Fields)","expandState":"expand","note":"用辐射场来表示全光函数(The Plenoptic Function)的一个快照（其中一组解）。\n\n全景球是一种辐射场。\n"},"children":[{"data":{"id":"crw44mttzlc0","created":1681438290191,"text":"全景球（环境探针）","note":"新视点位置需在拍摄全景球的视点位置附近，角度可以任意变化。\n\n在CG领域，通常也叫做天空盒(Skybox)或环境探针(Probe)，预烘焙了单一位置的环境的瞬态信息，可以将全景图分离出Radiance和Irradiance（镜面反射和漫反射），在作用于IBL(Image Based Lighting)。"},"children":[]},{"data":{"id":"crw44nlpz540","created":1681438291877,"text":"一堆不同位置的全景球","note":"视点可以在不同全景球构成的全景球范围内移动位置，通过在最近的几个全景球间插值来实现当前新视点的环境瞬态信息。"},"children":[]},{"data":{"id":"crw4naogzq00","created":1681439752665,"text":"考虑光或时变的全景球","note":"因为全景球捕获的是环境的瞬态信息，因此不能反应出有时间变量时的变化。\n\n白天、黑夜，不同角度的光照，…\n\n加上时间要素，会让数据量陡然增大，因此如果必要，可以根据实际的场景来确定时间的跨度、光源位置的改变情况。"},"children":[]}]}]}]},{"data":{"id":"crw38bnh9jc0","created":1681435758209,"text":"图形学(CG)方法","note":"图形学上，我们采用**渲染函数**来对某像素进行着色计算：通过计算的方法来生成全光函数(The Plenoptic Function)。\n\n渲染方程F：\n![渲染方程](https://latex.vimsky.com/test.image.latex.php?fmt=png&val=%255Cinline%2520%255Cdpi%257B150%257D%2520%255Cfootnotesize%2520F%253A%2520R%255En%2520%255Cto%2520R%255E3&dl=0)\n\n即：\n![渲染函数](https://latex.vimsky.com/test.image.latex.php?fmt=png&val=%255Cdpi%257B150%257D%2520%255Cfootnotesize%2520%255Cleft%2520%2528%2520%255Cbegin%257Bmatrix%257DMesh%255C%255CMaterial%255C%255CLight%255C%255CView%255Cend%257Bmatrix%257D%2520%255Cright%2520%2529%2520_%257Bn%255Ctimes%25201%257D%255Cto%2520%255Cleft%2520%2528%2520%255Cbegin%257Bmatrix%257Dr%255C%255Cg%255C%255Cb%255Cend%257Bmatrix%257D%2520%255Cright%2520%2529%2520_%257B3%255Ctimes%25201%257D&dl=0)\n\n---\n\n全光函数：七维函数表征场景中物体表面发出（或反射）的光线。\n\nref:<GAMES101 学习20--颜色、光场>\n\n---\n\nP.S. 数学公式工具：\n先用<在线LaTeX公式编辑器-编辑器>边写数学公式，然后拷到<LaTeX在线公式编辑转图片 - 纯净天空>内生成外链可以访问的图片，拷贝图片链接贴到显示的地方。"},"children":[{"data":{"id":"crw7p44qbgo0","created":1681448358468,"text":"渲染函数","expandState":"expand"},"children":[{"data":{"id":"crw5e9cye6o0","created":1681441865624,"text":"基于物理的渲染(PBR, Physically Based Rendering)","note":"PBR是尽量逼近去遵循物理原理的渲染方式。\n用物理真实的原理构建出渲染函数，通过计算的方法来生成全光函数。"},"children":[{"data":{"id":"crw8boh4d200","created":1681450126765,"text":"BSDF=BRDF+BTDF","expandState":"expand","note":"BRDF是双向反射分布函数，双向指入射方向和出射方向，BRDF描述了入射方向输入的能量，有多少被传递到出射方向上。\nBTDF是双向折射分布函数，BSDF是BRDF和BTDF的总称。"},"children":[{"data":{"id":"crw8bnq5v080","created":1681450125135,"text":"Phong、Blinn–Phong","note":"冯氏模型是物理上有能量损失的渲染函数，效果略显油，速度快、算法简单，也是普遍使用广泛的算法，OpenGL1.0时代的内置算法。"},"children":[]},{"data":{"id":"crwbgob6gsw0","created":1681458981556,"text":"Cook-Torrance","note":"Cook-Torrance光照模型是基于微表面模型推导的，相比冯氏模型更趋近于物理真实。\n现在的PBR渲染大部分都是基于Cook-Torrance光照模型，只是采用了不同的D/F/G函数。"},"children":[]},{"data":{"id":"crwbgp39b340","created":1681458983254,"text":"……"},"children":[]}]},{"data":{"id":"crw8c6xxj140","created":1681450166963,"text":"BSSRDF","note":"BSSRDF通过指定不同的光线入射位置和出射位置，用来处理具有次表面散射特征的材质（玉石、蜡烛、…）。\nP.S. 皮肤、毛发、眼球等还有独立研究的一些细分的次表面算法。"},"children":[]},{"data":{"id":"crwbtf4fvrc0","created":1681459980292,"text":"……"},"children":[]}]},{"data":{"id":"crw5e8h9xk00","created":1681441863708,"text":"非真实渲染(NPR, Non-Photorealistic Rendering)","note":"这个就不是智驾仿真场景的重点了。\n通常NPR会用在：卡通、油画、素描等等风格的世界。"},"children":[]}]}]}]},{"data":{"id":"crvhx73cg4w0","created":1681375642971,"text":"3D物体的几何和物理表达","layout":null,"note":"根据物体**复杂度**与**场景**的不同，有不同的表达和渲染计算方法","expandState":"expand"},"children":[{"data":{"id":"crwddpgzha00","created":1681464391211,"text":"存>算","expandState":"expand","note":"这是目前最常用的。"},"children":[{"data":{"id":"crwcgh2g0v40","created":1681461786900,"text":"三角网格","note":"三角网格：用流形曲面来做三维物体的几何表达，材质用网格三角形的顶点属性和纹理映射图。\n\n- 三角网格可以用来表示实体(Solid)物体的表面：2D流形曲面的分片线性逼近表达\n- 顶点：3D坐标\n- 材质：顶点属性+纹理映射图\n\n- 渲染方式：\n  * 光栅化渲染(Rasterization)\n  * 光路追踪渲染(Path Tracing)\n\n*三角网格是当今GPU支持渲染最完善的三维物体表达形式，传统渲染管线高度支持*\n\n---\n\n在数学中，流形(manifold)是可以局部欧几里得空间化的一个拓扑空间，是欧几里得空间中的曲线、曲面等概念的推广。欧几里得空间就是最简单的流形的实例。地球表面这样的球面则是一个稍微复杂的例子。一般的流形可以通过把许多平直的片折弯并粘连而成。"},"children":[]},{"data":{"id":"crwcghtb6co0","created":1681461788525,"text":"点云数据","note":"- 本质：实体表面（曲面）的离散采样\n- 渲染：\n  * point splatting\n  * 点云三角化后，走三角网格的渲染方式"},"children":[]}]},{"data":{"id":"crwdcrh15uw0","created":1681464317204,"text":"算>存","expandState":"expand","note":"关键问题：\n1. 几何的数学表达\n   空间中哪些地方有“物体介质”存在的：点坐标、密度函数等\n2. 材质的数学表达\n   该“物体介质”对光的视觉反应：BRDF等"},"children":[{"data":{"id":"crwcgjdnhzc0","created":1681461791932,"text":"参数曲面","note":"- 本质：显函数表示的曲面\n  * 非均匀有理B样条曲面(NURBS)\n  * 工业CAD曲面的数学标准(STEP)\n  e.g. 圆环NURBS曲面\n  ![圆环NURBS曲面](https://latex.vimsky.com/test.image.latex.php?fmt=png&val=%255Cdpi%257B150%257D%2520%255Cfootnotesize%2520S%2528u%252Cv%2529%253D%255Csum_%257Bi%253D0%257D%255E%257Bn%257D%255Csum_%257Bj%253D0%257D%255E%257Bm%257DB_%257Bi%257D%255E%257Bn%257D%2528u%2529B_%257Bj%257D%255E%257Bm%257D%2528v%2529P_%257Bij%257D&dl=0)\n- 渲染：\n  * 确定离散精度后，离散成三角网格再渲染\n  * 支持显函数表示的参数曲面的光线追踪渲染"},"children":[]},{"data":{"id":"crwdccsohgg0","created":1681464285256,"text":"隐式曲面","note":"- 本质：三维函数w=f(x,y,z)的等值面\n  * 即：满足方程F(x,y,z)=0的所有无限个点的集合所构成的平面\n- 渲染：\n  * 确定离散精度后，离散成三角网格再渲染\n  * 支持显函数表示的参数曲面的光线追踪渲染\n- *趋势：方程F使用神经网络函数表达*"},"children":[]}]},{"data":{"id":"crwdclob8880","created":1681464304583,"text":"体数据（体图像，Volumetric Image）","note":"- 本质：2D图像的张量推广\n- 体表达：\n  * 体素（离散表达）：又可以进一步分为**曲线网格**（由规则的网格生成，如最简单的一个例子是等间距均匀网格）和**非结构化网格**（由任意形状的单元组合而成）\n    体素中的每个格子可以存储一系列的数据，如速度、加速度、密度、压力、温度、面积、体积等等\n  * 有向距离场函数(SDF, Signed Distance Function)（连续表达）\n  * 神经网络“函数”(Neural Volumetric Representation)（连续表达）\n- 体渲染：\n  * 直接体绘制(DVR, Direct Volume Rendering)\n    光线投射法(Ray Casting / Ray Marching)\n    抛雪球法(Splatting)\n    错切-变形法(Shear-Wrap)\n  * 间接体绘制(IVR, Indirect Volume Rendering)\n  * 最大密度投影(Maximum Intensity Projection)\n"},"children":[]}]}]}]},"template":"right","theme":"fresh-blue-compat","version":"1.4.43"}